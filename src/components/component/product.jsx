/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/HHqfgo29TVt
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Judson } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

judson({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "../ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem, DropdownMenuRadioGroup, DropdownMenuRadioItem } from " ../ui/dropdown-menu"
import { Button } from " ../ui/button"
import { Label } from " ../ui/label"
import { Checkbox } from " ../ui/checkbox"
import Link from "next/link"

export function Product() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filters, setFilters] = useState({
    category: [],
    price: { min: 0, max: 1000 },
  })
  const [sortBy, setSortBy] = useState("featured")
  const products = [
    {
      id: 1,
      name: "Wireless Headphones",
      description: "High-quality wireless headphones with noise cancellation",
      price: 99.99,
      category: "Electronics",
      image: "/placeholder.svg",
      featured: true,
    },
    {
      id: 2,
      name: "Leather Backpack",
      description: "Durable and stylish leather backpack",
      price: 79.99,
      category: "Bags",
      image: "/placeholder.svg",
      featured: false,
    },
    {
      id: 3,
      name: "Outdoor Jacket",
      description: "Waterproof and breathable outdoor jacket",
      price: 149.99,
      category: "Clothing",
      image: "/placeholder.svg",
      featured: true,
    },
    {
      id: 4,
      name: "Fitness Tracker",
      description: "Advanced fitness tracker with heart rate monitoring",
      price: 59.99,
      category: "Electronics",
      image: "/placeholder.svg",
      featured: false,
    },
    {
      id: 5,
      name: "Ceramic Mug",
      description: "Handcrafted ceramic mug with unique design",
      price: 24.99,
      category: "Home",
      image: "/placeholder.svg",
      featured: true,
    },
    {
      id: 6,
      name: "Leather Wallet",
      description: "Minimalist leather wallet with RFID protection",
      price: 39.99,
      category: "Accessories",
      image: "/placeholder.svg",
      featured: false,
    },
  ]
  const filteredProducts = useMemo(() => {
    return products
      .filter((product) => {
        const searchMatch =
          product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          product.description.toLowerCase().includes(searchTerm.toLowerCase())
        const categoryMatch = filters.category.length === 0 || filters.category.includes(product.category)
        const priceMatch = product.price >= filters.price.min && product.price <= filters.price.max
        return searchMatch && categoryMatch && priceMatch
      })
      .sort((a, b) => {
        switch (sortBy) {
          case "featured":
            return b.featured - a.featured
          case "price-asc":
            return a.price - b.price
          case "price-desc":
            return b.price - a.price
          default:
            return 0
        }
      });
  }, [searchTerm, filters, sortBy])
  const featuredProducts = useMemo(() => {
    return products.filter((product) => product.featured);
  }, [products])
  const handleSearch = (e) => {
    setSearchTerm(e.target.value)
  }
  const handleCategoryFilter = (category) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      category: prevFilters.category.includes(category)
        ? prevFilters.category.filter((c) => c !== category)
        : [...prevFilters.category, category],
    }))
  }
  const handlePriceFilter = (min, max) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      price: { min, max },
    }))
  }
  const handleSort = (value) => {
    setSortBy(value)
  }
  return (
    (<div className="container mx-auto px-4 md:px-6 py-8">
      <div
        className="flex flex-col md:flex-row items-start md:items-center gap-4 mb-8">
        <div className="relative flex-1">
          <SearchIcon
            className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search products..."
            value={searchTerm}
            onChange={handleSearch}
            className="w-full pl-10 pr-4 py-2 rounded-lg bg-muted" />
        </div>
        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button size="sm" variant="outline">
                <FilterIcon className="w-4 h-4 mr-2" />
                Filters
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              {["Electronics", "Bags", "Clothing", "Home", "Accessories"].map((category) => (
                <DropdownMenuCheckboxItem
                  key={category}
                  checked={filters.category.includes(category)}
                  onCheckedChange={() => handleCategoryFilter(category)}>
                  {category}
                </DropdownMenuCheckboxItem>
              ))}
              <DropdownMenuSeparator />
              <DropdownMenuLabel>Price Range</DropdownMenuLabel>
              <DropdownMenuContent>
                <div className="w-full" />
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>${filters.price.min}</span>
                  <span>${filters.price.max}</span>
                </div>
              </DropdownMenuContent>
            </DropdownMenuContent>
          </DropdownMenu>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button size="sm" variant="outline">
                <ListOrderedIcon className="w-4 h-4 mr-2" />
                Sort
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Sort by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuRadioGroup value={sortBy} onValueChange={handleSort}>
                <DropdownMenuRadioItem value="featured">Featured</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="price-asc">Price: Low to High</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="price-desc">Price: High to Low</DropdownMenuRadioItem>
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="grid md:grid-cols-[240px_1fr] gap-8">
        <div className="bg-muted/40 rounded-lg p-4">
          <h3 className="text-lg font-semibold mb-4">Filters</h3>
          <div className="grid gap-4">
            <div>
              <h4 className="text-base font-medium mb-2">Category</h4>
              <div className="grid gap-2">
                {["Electronics", "Bags", "Clothing", "Home", "Accessories"].map((category) => (
                  <Label key={category} className="flex items-center gap-2 font-normal">
                    <Checkbox
                      checked={filters.category.includes(category)}
                      onCheckedChange={() => handleCategoryFilter(category)} />
                    {category}
                  </Label>
                ))}
              </div>
            </div>
            <div>
              <h4 className="text-base font-medium mb-2">Price Range</h4>
              <div className="w-full" />
              <div className="flex justify-between text-sm text-muted-foreground">
                <span>${filters.price.min}</span>
                <span>${filters.price.max}</span>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
            {filteredProducts.map((product) => (
              <div
                key={product.id}
                className="bg-background rounded-lg shadow-lg overflow-hidden">
                <Link href="#" prefetch={false}>
                  <img
                    src="/placeholder.svg"
                    alt={product.name}
                    width={400}
                    height={400}
                    className="w-full h-48 object-cover" />
                  <div className="p-4">
                    <h3 className="text-lg font-semibold">{product.name}</h3>
                    <p className="text-muted-foreground">{product.description}</p>
                    <div className="flex items-center justify-between mt-4">
                      <span className="text-primary font-semibold">${product.price.toFixed(2)}</span>
                      <Button size="sm" variant="outline">
                        <ShoppingCartIcon className="w-4 h-4 mr-2" />
                        Add to Cart
                      </Button>
                    </div>
                  </div>
                </Link>
              </div>
            ))}
          </div>
        </div>
      </div>
      <div className="mt-8">
        <h2 className="text-2xl font-semibold mb-4">Featured Products</h2>
        <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
          {featuredProducts.map((product) => (
            <div
              key={product.id}
              className="bg-background rounded-lg shadow-lg overflow-hidden">
              <Link href="#" prefetch={false}>
                <img
                  src="/placeholder.svg"
                  alt={product.name}
                  width={400}
                  height={400}
                  className="w-full h-48 object-cover" />
                <div className="p-4">
                  <h3 className="text-lg font-semibold">{product.name}</h3>
                  <p className="text-muted-foreground">{product.description}</p>
                  <div className="flex items-center justify-between mt-4">
                    <span className="text-primary font-semibold">${product.price.toFixed(2)}</span>
                    <Button size="sm" variant="outline">
                      <ShoppingCartIcon className="w-4 h-4 mr-2" />
                      Add to Cart
                    </Button>
                  </div>
                </div>
              </Link>
            </div>
          ))}
        </div>
      </div>
    </div>)
  );
}

function FilterIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>)
  );
}


function ListOrderedIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="10" x2="21" y1="6" y2="6" />
      <line x1="10" x2="21" y1="12" y2="12" />
      <line x1="10" x2="21" y1="18" y2="18" />
      <path d="M4 6h1v4" />
      <path d="M4 10h2" />
      <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" />
    </svg>)
  );
}


function SearchIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>)
  );
}


function ShoppingCartIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <circle cx="8" cy="21" r="1" />
      <circle cx="19" cy="21" r="1" />
      <path
        d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
    </svg>)
  );
}


function XIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>)
  );
}
